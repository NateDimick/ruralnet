import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, o as globals, p as handle_promise, r as empty, l as insert_dev, b as detach_dev, a as space, e as element, t as text, q as query_selector_all, c as claim_space, f as claim_element, g as children, h as claim_text, k as add_location, j as attr_dev, m as append_dev, u as set_input_value, w as run_all, x as listen_dev, n as noop, y as set_style, z as set_data_dev } from './client.f18ef5e3.js';

/* src/routes/about.svelte generated by Svelte v3.21.0 */

const { console: console_1 } = globals;
const file = "src/routes/about.svelte";

// (54:2) {#if clicked}
function create_if_block(ctx) {
	let await_block_anchor;
	let promise_1;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 7,
		error: 8
	};

	handle_promise(promise_1 = /*promise*/ ctx[1], info);

	const block = {
		c: function create() {
			await_block_anchor = empty();
			info.block.c();
		},
		l: function claim(nodes) {
			await_block_anchor = empty();
			info.block.l(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*promise*/ 2 && promise_1 !== (promise_1 = /*promise*/ ctx[1]) && handle_promise(promise_1, info)) ; else {
				const child_ctx = ctx.slice();
				child_ctx[7] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(54:2) {#if clicked}",
		ctx
	});

	return block;
}

// (59:4) {:catch error}
function create_catch_block(ctx) {
	let p;
	let t_value = /*error*/ ctx[8].message + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { style: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(p, "color", "red");
			add_location(p, file, 59, 6, 1382);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*promise*/ 2 && t_value !== (t_value = /*error*/ ctx[8].message + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(59:4) {:catch error}",
		ctx
	});

	return block;
}

// (57:4) {:then speed}
function create_then_block(ctx) {
	let p;
	let t0;
	let t1_value = /*speed*/ ctx[7] + "";
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("Speed: ");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Speed: ");
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 57, 6, 1335);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*promise*/ 2 && t1_value !== (t1_value = /*speed*/ ctx[7] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(57:4) {:then speed}",
		ctx
	});

	return block;
}

// (55:20)        <p>waiting...</p>     {:then speed}
function create_pending_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("waiting...");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "waiting...");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 55, 6, 1293);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(55:20)        <p>waiting...</p>     {:then speed}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let div;
	let button0;
	let t5;
	let t6;
	let button1;
	let t7;
	let t8;
	let input;
	let t9;
	let dispose;
	let if_block = /*clicked*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("REST Test");
			t2 = space();
			p = element("p");
			t3 = text("How to make RESTful calls in Sapper?");
			t4 = space();
			div = element("div");
			button0 = element("button");
			t5 = text("Get Speed");
			t6 = space();
			button1 = element("button");
			t7 = text("Post Form");
			t8 = space();
			input = element("input");
			t9 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1rj2x3p\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "REST Test");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "How to make RESTful calls in Sapper?");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			button0 = claim_element(div_nodes, "BUTTON", {});
			var button0_nodes = children(button0);
			t5 = claim_text(button0_nodes, "Get Speed");
			button0_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			button1 = claim_element(div_nodes, "BUTTON", {});
			var button1_nodes = children(button1);
			t7 = claim_text(button1_nodes, "Post Form");
			button1_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			input = claim_element(div_nodes, "INPUT", { type: true, placeholder: true });
			t9 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Get";
			add_location(h1, file, 46, 0, 1002);
			add_location(p, file, 48, 0, 1022);
			add_location(button0, file, 50, 2, 1074);
			add_location(button1, file, 51, 2, 1126);
			attr_dev(input, "type", "text");
			attr_dev(input, "placeholder", "type something");
			add_location(input, file, 52, 2, 1175);
			add_location(div, file, 49, 0, 1066);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, button0);
			append_dev(button0, t5);
			append_dev(div, t6);
			append_dev(div, button1);
			append_dev(button1, t7);
			append_dev(div, t8);
			append_dev(div, input);
			set_input_value(input, /*clientForm*/ ctx[2]);
			append_dev(div, t9);
			if (if_block) if_block.m(div, null);
			if (remount) run_all(dispose);

			dispose = [
				listen_dev(button0, "click", /*clickButton*/ ctx[4], false, false, false),
				listen_dev(button1, "click", /*postData*/ ctx[3], false, false, false),
				listen_dev(input, "input", /*input_input_handler*/ ctx[6])
			];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*clientForm*/ 4 && input.value !== /*clientForm*/ ctx[2]) {
				set_input_value(input, /*clientForm*/ ctx[2]);
			}

			if (/*clicked*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let clicked = false;
	let promise;

	const getData = async () => {
		$$invalidate(0, clicked = true);

		try {
			let res = await fetch("about.json");
			let { speed } = await res.json();
			console.log("Server response object:");
			console.log(res);
			console.log("Response JSON parsed:");
			console.log(speed);
			return speed;
		} catch(error) {
			return error;
		}
	};

	const postData = async () => {
		const post = { clientForm };

		const res = await fetch("about.json", {
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(post)
		});

		if (res.ok) {
			const result = await res.json();
			console.log("Server response object:");
			console.log(res);
			console.log("Response JSON parsed:");
			console.log(result);
		}
	};

	let clientForm;

	const clickButton = async () => {
		$$invalidate(1, promise = getData());
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<About> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("About", $$slots, []);

	function input_input_handler() {
		clientForm = this.value;
		$$invalidate(2, clientForm);
	}

	$$self.$capture_state = () => ({
		clicked,
		promise,
		getData,
		postData,
		clientForm,
		clickButton
	});

	$$self.$inject_state = $$props => {
		if ("clicked" in $$props) $$invalidate(0, clicked = $$props.clicked);
		if ("promise" in $$props) $$invalidate(1, promise = $$props.promise);
		if ("clientForm" in $$props) $$invalidate(2, clientForm = $$props.clientForm);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		clicked,
		promise,
		clientForm,
		postData,
		clickButton,
		getData,
		input_input_handler
	];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQuMTQ5OWY2NWMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYWJvdXQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGxldCBjbGlja2VkID0gZmFsc2U7XG4gIGxldCBwcm9taXNlO1xuICBjb25zdCBnZXREYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgIGNsaWNrZWQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgZmV0Y2goXCJhYm91dC5qc29uXCIpO1xuICAgICAgbGV0IHsgc3BlZWQgfSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZyhcIlNlcnZlciByZXNwb25zZSBvYmplY3Q6XCIpO1xuICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiUmVzcG9uc2UgSlNPTiBwYXJzZWQ6XCIpO1xuICAgICAgY29uc29sZS5sb2coc3BlZWQpO1xuICAgICAgcmV0dXJuIHNwZWVkXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvclxuICAgIH1cbiAgfTtcblxuICBjb25zdCBwb3N0RGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwb3N0ID0geyBjbGllbnRGb3JtIH07XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXCJhYm91dC5qc29uXCIsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdClcbiAgICB9KTtcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgY29uc29sZS5sb2coXCJTZXJ2ZXIgcmVzcG9uc2Ugb2JqZWN0OlwiKTtcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICBjb25zb2xlLmxvZyhcIlJlc3BvbnNlIEpTT04gcGFyc2VkOlwiKTtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgfVxuICB9O1xuXG4gIGxldCBjbGllbnRGb3JtO1xuICBjb25zdCBjbGlja0J1dHRvbiA9IGFzeW5jICgpID0+IHtcbiAgICBwcm9taXNlID0gZ2V0RGF0YSgpO1xuICB9O1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkdldDwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+UkVTVCBUZXN0PC9oMT5cblxuPHA+SG93IHRvIG1ha2UgUkVTVGZ1bCBjYWxscyBpbiBTYXBwZXI/PC9wPlxuPGRpdj5cbiAgPGJ1dHRvbiBvbjpjbGljaz17Y2xpY2tCdXR0b259PkdldCBTcGVlZDwvYnV0dG9uPlxuICA8YnV0dG9uIG9uOmNsaWNrPXtwb3N0RGF0YX0+UG9zdCBGb3JtPC9idXR0b24+XG4gIDxpbnB1dCBiaW5kOnZhbHVlPXtjbGllbnRGb3JtfSB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwidHlwZSBzb21ldGhpbmdcIiAvPlxuICB7I2lmIGNsaWNrZWR9XG4gICAgeyNhd2FpdCBwcm9taXNlfVxuICAgICAgPHA+d2FpdGluZy4uLjwvcD5cbiAgICB7OnRoZW4gc3BlZWR9XG4gICAgICA8cD5TcGVlZDoge3NwZWVkfTwvcD5cbiAgICB7OmNhdGNoIGVycm9yfVxuICAgICAgPHAgc3R5bGU9XCJjb2xvcjpyZWRcIj57ZXJyb3IubWVzc2FnZX08L3A+XG4gICAgey9hd2FpdH1cbiAgey9pZn1cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dDQXNEWSxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUVBQVAsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFLUyxHQUFLLElBQUMsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpRUFBYixHQUFLLElBQUMsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFGeEIsR0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21FQUFMLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFKZixHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQURPLEdBQVU7Ozs7OztpREFGWCxHQUFXOzhDQUNYLEdBQVE7Ozs7O2tFQUNQLEdBQVU7MENBQVYsR0FBVTs7O21CQUN4QixHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FwRFIsT0FBTyxHQUFHLEtBQUs7S0FDZixPQUFPOztPQUNMLE9BQU87a0JBQ1gsT0FBTyxHQUFHLElBQUk7OztPQUVSLEdBQUcsU0FBUyxLQUFLLENBQUMsWUFBWTtTQUM1QixLQUFLLFdBQVcsR0FBRyxDQUFDLElBQUk7R0FDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUI7R0FDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHO0dBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7R0FDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLO1VBQ1YsS0FBSztVQUNMLEtBQUs7VUFDTCxLQUFLOzs7O09BSVYsUUFBUTtRQUNOLElBQUksS0FBSyxVQUFVOztRQUNuQixHQUFHLFNBQVMsS0FBSyxDQUFDLFlBQVk7R0FDbEMsTUFBTSxFQUFFLE1BQU07R0FDZCxPQUFPLElBQ0wsY0FBYyxFQUFFLGtCQUFrQjtHQUVwQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJOzs7TUFFdkIsR0FBRyxDQUFDLEVBQUU7U0FDRixNQUFNLFNBQVMsR0FBRyxDQUFDLElBQUk7R0FDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUI7R0FDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHO0dBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7R0FDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNOzs7O0tBSWxCLFVBQVU7O09BQ1IsV0FBVztrQkFDZixPQUFPLEdBQUcsT0FBTzs7Ozs7Ozs7Ozs7OztFQWNBLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
